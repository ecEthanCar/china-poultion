---
title: "China Pollution Tidying Pt 2"
subtitle: "Report"
format: pdf
---

```{r}
#| updated-economic-indicators

### IGNORE ###

# Set the directory path where the files are located
folder_path_6 <- "city-level-take-two (1)"

# List all the files in the folder
file_list_6 <- list.files(folder_path_6)

# Create an empty list to store the data from each file
data_list_6 <- list()

suppressWarnings({
# Iterate over the file list using a for loop
for (file_name in file_list_6) {
  file_path <- file.path(folder_path_6, file_name)
  # file_data <- read_xlsx(file_path, na = "NA")
  file_data <- merge(merge(merge(
    read_xlsx(file_path, sheet = 1, na = "NA"), 
    # weird error where this can run but cannot be rendered because "read_xlsx doesn't exist"
    read_xlsx(file_path, sheet = 2, na = "NA"), by = "Region"),
    read_xlsx(file_path, sheet = 3, na = "NA"), by = "Region"), 
    read_xlsx(file_path, sheet = 4, na = "NA"), by = "Region")
  # New column indicating year
  file_data$Province <- str_replace_all(
    str_extract(file_name, "\\((.*?)\\)"), "\\(|\\)", "") |> 
    as.character()
  file_data$year <- str_extract(file_name, "\\d{4}") |> as.numeric()
  # Converts all but Region to doubles
  data_list_6[[file_name]] <- file_data |>
    mutate(across(-c(Region, Province), as.numeric))
}
})
# Merge files
data_6 <- bind_rows(data_list_6) |>
  filter(Region != "Source: Wind") |>
  mutate(Region = trimws(Region)) |>
  mutate(Region = ifelse(Region == Province, NA, Region)) |>
  group_by(year)

data_6 |> write_csv("data/data_6.csv")

# 
# providence_only |> write_csv(file = "data/E_I(2016-2022).csv")
# providence_only |> write_excel_csv(file = "data/E_I(2016-2022).xlsx")

```

```{r}
#| modifying-updated-economic-indicators

data_6 <- read_csv("Shared_Data/Untitled spreadsheet - data_6.csv")

data_6$Region <- gsub(" Dist", "", data_6$Region)
data_6$Province <- gsub("Neimenggu", "Inner Mongolia", data_6$Province)
data_6$Region <- gsub("\\bBaisha\\b", "Baisha Li", data_6$Region)
data_6$Region <- gsub("tongling", "Tongling", data_6$Region)
data_6$Region <- gsub("Bose", "Baise", data_6$Region)
data_6$Region <- gsub("Changdu", "Chengdu", data_6$Region)
data_6$Region <- gsub("\\bChangjiang\\b", "Changjiang Li", data_6$Region)
data_6$Region <- gsub("Hulun Buir", "Hulun Beir", data_6$Region)
data_6$Region <- gsub("Ili Kazak", "Ili Kazakh", data_6$Region)
data_6$Region <- gsub("Kaixian", "Kaizhou", data_6$Region)
data_6$Region <- gsub("Zhongxian", "Zhong", data_6$Region)
data_6$Region <- gsub("Zhanjiang", "Zhangjiang", data_6$Region)
data_6$Region <- gsub("Xigaze", "Shigatse", data_6$Region)
data_6$Region <- gsub("ürümqi", "Urumqi", data_6$Region)
data_6$Region <- gsub("Lvliang", "Lüliang", data_6$Region)
data_6$Region <- gsub("Dist", "", data_6$Region)
data_6$Region <- ifelse(
  data_6$Region == "Chengdu" & data_6$Province == "Tibet", 
  "Chamdo", 
  data_6$Region
)
data_6$Region <- gsub("Ili Kazakhhhh", "Ili Kazak", data_6$Region)
data_6$Region <- gsub("Baisha Li Li Li Li Li", "Baisha Li", data_6$Region)
data_6$Region <- gsub("Changjiang Li Li Li Li Li", "Changjiang Li", data_6$Region)
data_6$Region <- gsub("白杨市", "Baiyang", data_6$Region)
data_6$Region <- gsub("WULONG", "Wulong", data_6$Region)
data_6$Region <- gsub("Neimenggu\\(Inner Mongolia\\)", "Inner Mongolia", data_6$Region)

data_6$Region <- ifelse(data_6$Region == data_6$Province, NA, data_6$Region)

encoded_data_6 <- merge(data_6, for_cleaned, by = c("Region", "Province"), all.x = TRUE)

# encoded_data_6 |> distinct(Province)

na_encoded_data_6 <- encoded_data_6 |> filter(is.na(Statistical_Division_Code)) |>
  distinct(Region, Province)

good_encoded_data_6 <- encoded_data_6 |> filter(!is.na(Statistical_Division_Code)) |>
  distinct(Region, Province)

```

```{r}

# gdp <- read_csv("Shared_Data/copy-city-level-gdp - My Series.csv")
# 
# gdp_2 <- gdp |>
#   mutate(Province = gsub("CN: GDP: ", "", Province)) |>
#   mutate(Province = gsub("\\(DC\\)", "", Province)) |>
#   mutate(Industry = str_extract(Province, "^[^:]+")) |>
#   mutate(Industry = ifelse(Industry %in% c("Primary Industry",
#                                            "Secondary Industry", 
#                                            "Tertiary Industry", 
#                                            "Agriculture, Forestry, Animal Husbandry and Fishery (Incl. 
#                                            Services)",
#                                            "SI: Industry",
#                                            "SI: Construction"), 
#                            Industry, NA)) |> 
#   mutate(Province = gsub("Primary Industry: |Secondary Industry: |Tertiary Industry: |Agriculture, Forestry, Animal Husbandry and Fishery (Incl. Services): |SI: Industry : |SI: Construction : ", "", Province)) 
# 
# gdp_3 <- gdp_2 |> mutate(Province = str_extract(Province, "^[^:]+"))
#   
# 
# gdp_2
# gdp_3
# gdp_2$Industry <- str_extract(Province, "^[^:]+", gdp_2$Province)

# gdp$Province <- gsub("CN: GDP: ", "", gdp$Province)

```

```{r}
#| gdp-redone

gdp <- read_csv("Shared_Data/copy2-city-level-gdp - My Series.csv")

gdp_2 <- gdp |>
  separate(Province, into = paste0("col", 1:6), sep = ":", extra = "merge") |>
  # Removes extra spaces after separation
  mutate_at(vars(c(col1, col2, col3, col4, col5, col6)), trimws) |>
  # Removes things in col4 (future Province col) not in col3 (future Industry col)
  mutate(col4 = ifelse(col4 %in% col3, col4, NA)) |>
  # Pastes Province names in col3 onto col4, them removes from col3
  mutate(col4 = ifelse(is.na(col4) & col3 %in% col4, col3, col4),
         col3 = ifelse(col3 %in% col4, NA, col3)) |> # Ask later what NA for industry should be
  rename(`GDP: Industry` = col3, Province = col4) |>
  select(!c(col1, col2, col5, col6))
  
  #mutate(col4 = ifelse(col4 %in% col3, col4, NA))
  #distinct(col3)
  
  # mutate(col3 = ifelse(col3 == "SI" & (col4 == "Industry" | col4 == "Construction"), col4, col3)) |>
  # mutate(col4 = ifelse(col4 == col3, NA, col4)) |>
  # mutate(col5 = ifelse(col4 == Region, NA, col4))

```
```{r}
#| pivot-gdp-by-year

pivot_gdp <- gdp_2 |>
  pivot_longer(
    cols = c(`1999`:`2020`),
    names_to = "year",
    values_to = "GDP"
  ) |>
  select(`GDP: Industry`, Province, Region, year, GDP) |>
  mutate(year = as.numeric(year),
         pct = as.numeric(GDP))

```

```{r}

# Remember: encoded_data_6 is a incomplete data set
pivot_estate_property_n <- pivot_estate_property |>
  mutate(Region = ifelse(Region == Province, NA, Region))

# bigger <- merge(encoded_data_6, pivot_estate_property_n, by = c("Region", "Province", "year"), how = "outer")
bigger <- left_join(encoded_data_6, pivot_estate_property_n, by = c("Region", "Province", "year"))
bigger |> write_csv(file = "data/estate_property_debt(2016-2022).csv")

# pivot_estate_property |> distinct(Province)

```

```{r}
#| Gdp-estate-property-with-economic-indicators

# pivot_gdp_n <- pivot_gdp |>
#   mutate(Region = ifelse(Region == Province, NA, Region))

pivot_gdp_n <- pivot_gdp |>
  mutate(Region = ifelse(Region == Province, NA, Region)) |>
  mutate(`GDP: Industry` = ifelse(is.na(`GDP: Industry`), "Total", `GDP: Industry`)) # ASSUME TOTAL FOR NOW, CHECK WITH PROFESSOR
  
# bigger_2 <- merge(bigger, pivot_gdp_n, by = c("Region", "Province", "year"), how = "outer") |>
#   select(!pct)

bigger_2 <- left_join(bigger, pivot_gdp_n, by = c("Region", "Province", "year")) |>
  select(!pct)

# bigger_2 |> write_csv(file = "data/estate_property_debt_gdp(2016-2022).csv")

# bigger_2$`GDP: Industry` <- gsub("SI", "Secondary Industry", bigger_2$`GDP: Industry`)

```

```{r}

lat_long <- read_csv(file = "Shared_Data/China Latitude and Longitude - location.csv") |>
  select(!c(Region, Region_ch, `District/County_ch`, Province_ch)) |>
  rename(Region = `District/County`) |>
  mutate(Province = str_remove_all(Province,
  paste(c(" (?i)province",
          " (?i)autonomous region",
          " (?i)autonomous prefecture",
          " (?i)uygur",
          " (?i)hui",
          " (?i)zhuang"),
        collapse = "|"))) |>
  mutate(Region = str_remove_all(Region,
  paste(c(" (?i)area",
          " (?i)league",
          " (?i)district",
          " (?i)new district",
          " (?i)county", 
          " (?i)city", 
          " (?i)administration",
          " (?i)region",
          " (?i)autonomous county",
          " (?i)autonomous region",
          " (?i)new area",
          " (?i)administrative region",
          " (?i)administrative prefecture",
          " (?i)autonomous prefecture",
          " Tibetan Qiang",
          " Li Miao",
          " Tibetan and Qiang Autonomous Prefecture",
          " Li and Miao",
          " Mongolian",
          " (?i)hui",
          " Bai",
          " Dai and Jingpo",
          " Tujia and Miao",
          " Tibetan",
          " Hani| Yi",
          "City of ",
          " Korean",
          " Dai",
          " Zhuang Miao",
          " Tujia",
          " Buyi Miao",
          " Miao and Dong",
          " Zhuang and Miao Autonomous Prefecture",
          " and"),
        collapse = "|"))) |>
  mutate(Region = ifelse(Region == Province, NA, Region))
# 
# lat_long_n <- lat_long
#   mutate(Region = ifelse(is.na(Province), Region, NA))
# 
# lat_long_2 <- left_join(for_cleaned, lat_long_n, by = c("Region", "Province"))

bigger_3 <- left_join(bigger_2, lat_long, by = c("Region", "Province"))

bigger_4 <- bigger_3 |>
  mutate(Region = ifelse(is.na(Region), Province, Region)) |> 
  mutate(`GDP: Industry` = ifelse(is.na(`GDP: Industry`), "Total", `GDP: Industry`)) 

no_na_bigger_4 <- bigger_4 |> na.omit()

na_location <- bigger_3 |> filter(is.na(Longitude) | is.na(Latitude)) |>
  distinct(Province, Region)

bigger_3 |> write_csv(file = "data/estate_property_debt_gdp_location(2016-2022).csv")

```

```{r}
#| shrinking-cities-with-ids

library(haven)
shrinking_map <- read_dta("Shared_Data/joined-layer-shrinking-map.dta")

shrinking_map <- shrinking_map |>
  rename(Region = adm2_en) |>
  rename(Province = adm1_en) |>
  mutate(Province = str_remove_all(Province,
    paste(c(" (?i)province",
            " (?i)autonomous region",
            " (?i)autonomous prefecture",
            " (?i)uygur",
            " (?i)hui",
            " (?i)zhuang",
            " (?i)municipality"),
          collapse = "|")))

shrinking_map$Region <- gsub("Dist", "", shrinking_map$Region)
shrinking_map$Region <- gsub("\\(Inner Mongolia", "", shrinking_map$Region)
shrinking_map$Region <- gsub("WULONG", "Wulong", shrinking_map$Region)
shrinking_map$Region <- gsub("Neimenggu\\)", "Neimenggu", shrinking_map$Region)
shrinking_map$Province <- gsub("\\(Inner Mongolia", "", shrinking_map$Province)
shrinking_map$Province <- gsub("Neimenggu", "Inner Mongolia", shrinking_map$Province)
shrinking_map$Region <- gsub("\\bBaisha\\b", "Baisha Li", shrinking_map$Region)
shrinking_map$Region <- gsub("tongling", "Tongling", shrinking_map$Region)
shrinking_map$Region <- gsub("Bose", "Baise", shrinking_map$Region)
shrinking_map$Region <- gsub("Changdu", "Chengdu", shrinking_map$Region)
shrinking_map$Region <- gsub("Changjiang", "Changjiang Li", shrinking_map$Region)
shrinking_map$Region <- gsub("Hulun Buir", "Hulun Beir", shrinking_map$Region)
shrinking_map$Region <- gsub("Ili Kazak", "Ili Kazakh", shrinking_map$Region)
shrinking_map$Region <- gsub("Kaixian", "Kaizhou", shrinking_map$Region)
shrinking_map$Region <- gsub("Zhongxian", "Zhong", shrinking_map$Region)
shrinking_map$Region <- gsub("Zhanjiang", "Zhangjiang", shrinking_map$Region)
shrinking_map$Region <- gsub("Xigaze", "Shigatse", shrinking_map$Region)
shrinking_map$Region <- gsub("ürümqi", "Urumqi", shrinking_map$Region)
shrinking_map$Region <- gsub("Lvliang", "Lüliang", shrinking_map$Region)
shrinking_map$Region <- ifelse(
  shrinking_map$Region == "Chengdu" & shrinking_map$Province == "Tibet", 
  "Chamdo", 
  shrinking_map$Region
)

shrinking_map_wid <- merge(shrinking_map, for_cleaned, by = c("Region", "Province"))

```

```{r}

  # file_data <- merge(merge(
  #   read_xlsx(file_path, sheet = 1, na = "NA"), 
  #   read_xlsx(file_path, sheet = 2, na = "NA"), by = "Region"), 
  #   read_xlsx(file_path, sheet = 3, na = "NA"), by = "Region")
  # New column indicating year

# 
# # Set the directory path where the files are located
# folder_path_6 <- "city-level-take-two"
# 
# # List all the files in the folder
# file_list_6 <- list.files(folder_path_6)
# 
# # Create an empty list to store the data from each file
# data_list_6 <- list()
# 
# # Iterate over the file list using a for loop
# for (file_name in file_list_6) {
#   file_path <- file.path(folder_path_6, file_name)
#   
#   # Get the names of all sheets in the Excel file
#   sheet_names <- excel_sheets(file_path)
#   
#   # Create an empty list to store the data from each sheet
#   sheet_data_list <- list()
#   
#   # Iterate over the sheet names using a nested for loop
#   for (sheet_name in sheet_names) {
#     sheet_data <- read_excel(file_path, sheet = sheet_name, na = "NA")
#     # New column indicating year
#     sheet_data$Province <- str_replace_all(
#       str_extract(file_name, "\\((.*?)\\)"), "\\(|\\)", "") |>
#       as.character()
#     sheet_data$year <- str_extract(file_name, "\\d{4}") |> as.numeric()
#     # Converts all but Region to doubles
#     sheet_data <- sheet_data |>
#       mutate(across(-c(Region, Province), as.numeric))
#     
#     # Append the sheet data to the list
#     sheet_data_list[[sheet_name]] <- sheet_data
#   }
#   
#   # Append the sheet data list to the main data list
#   data_list_6[[file_name]] <- sheet_data_list
# }
# 
# data_6 <- bind_rows(data_list_6) |>
#   filter(Region != "Source: Wind") |>
#   group_by(year)
# 
# data_6$Region <- gsub("Dist", "", data_6$Region)

```

```{r}
#| local-government-funds-total-tidying

province_cleaned <- for_cleaned |>
  distinct(Province, Province.Code) |>
  na.omit()

jiangsu_funds <- read_csv("Shared_Data/Jiangsu Revenue of Local Government Funds Total - China_ Jiangsu_ Revenue of Loca.csv") |>
  pivot_longer(
    cols = c(`2006`:`2022`),
    names_to = "year",
  ) |>
  separate(Name, into = paste0("col", 1:4), sep = ":", extra = "merge") |>
  mutate_at(vars(c(col1, col2, col3, col4)), trimws) |>
  rename(Province = col2, Country = col1, Type = col3, Amount = col4)

provcodes_jiangsu_funds <- merge(jiangsu_funds, province_cleaned, by = c("Province"))

province_cleaned |> write_csv(file = "data/PROVONLY_cleaned_codes.csv")
provcodes_jiangsu_funds |> write_csv(file = "data/jiangsu_funds(2006-2022).csv")

```

```{r}
#| emissions-draft-file

ceads_city_2022 <- read_excel("Shared_Data/ceads-city-2022.xlsx")

### Definitely make a dataset to check if there are non-matching locations just because of the string.

pivot_ceads_city_2022 <- ceads_city_2022 |>
  pivot_longer(
    cols = c(`1995`:`2019`),
    names_to = "year",
    values_to = "Carbon Emissions"
  ) |>
  select(`Carbon Emissions`, CityID, ProvinceID, CityNameEn, year) |>
  mutate(year = as.numeric(year),
         CityID = as.character(CityID)) |>
  rename(`Province.Code` = ProvinceID, 
         Statistical_Division_Code = CityID,
         Region = CityNameEn)

bigger_n <- bigger |> mutate(Region = ifelse(is.na(Region), Province, Region))

# smaller <- left_join(pivot_ceads_city_2022, pivot_estate_property, by = c("year", "Region")) |>
#   filter(year <= 2019, !is.na(`Carbon Emissions`))

smaller <- left_join(pivot_ceads_city_2022, bigger_n, by = c("year", "Region", "Statistical_Division_Code", "Province.Code"))
smaller <- left_join(smaller, lat_long_2, by = c("Region", "Statistical_Division_Code", "Province.Code"))
colnames(smaller) <- gsub("（Special Bond）", " (Special Bond)", colnames(smaller))

smaller_2 <- filter(smaller, year >= 2016, year <= 2019)
  
smaller_lat_long_na <- smaller_2 |> 
  filter(is.na(Latitude) | is.na(Longitude)) |> 
  distinct(Province.Code, Region)

smaller_gdp_data_na <- smaller_2 |>
  filter(
    is.na(`Debt Ratio(%)`),
    is.na(`Wide Range Debt Ratio(%)`),
    is.na(`Debt Asset Ratio(%)`),
    is.na(`Wide Range Debt Asset Ratio(%)`),
    is.na(`Balance of Municipal Bonds(CNY,B)`),
    is.na(`Limitation of Municipal Bonds(CNY,B)`),
    is.na(`Fiscal Self-sufficiency(%)`),
    is.na(`GDP(CNY,B)`),
    is.na(`Growth Rate of GDP(%)`),
    is.na(`Per capita GDP(CNY)`),
    is.na(`Fixed Asset Investment(CNY,B)`),
    is.na(`Total Value of Imports and Exports(CNY,B)`),
    is.na(`Per Capita Disposable Income(CNY)`),
    is.na(`Industrial Increase Volume(CNY,B)`),
    is.na(`Budget Revenue(CNY,B)`),
    is.na(`Budget Expenditure(CNY,B)`),
    is.na(`Tax Revenue(CNY,B)`),
    is.na(`Share of Tax Revenue(%)`),
    is.na(`Revenue of Government-Managed Funds(CNY,B)`),
    is.na(`Expenditure of Government-Managed Funds(CNY,B)`),
    is.na(`Issuance（LGFV Bond）(CNY,B)`),
    is.na(`Net Financing（LGFV Bond）(CNY,B)`),
    is.na(`Issuance（Non-Standard Financing）(CNY,B)`),
    is.na(`Net Financing（Non-Standard Financing）(CNY,B)`),
    is.na(`Issuance(General Bond)(CNY,B)`),
    is.na(`Net Financing(General Bond)(CNY,B)`),
    is.na(`Issuance (Special Bond)(CNY,B)`),
    is.na(`Net Financing (Special Bond)(CNY,B)`)
  ) |> 
  distinct(Province.Code, Region)

smaller_estate_prop_data_na <- smaller_2 |>
  filter(
    is.na(Annual_Real_Estate_Investment),
    is.na(Annual_Avg_Property_Price)
    ) |> 
  distinct(Province.Code, Region)

smaller_2 |> write_csv(file = "data/carbon_emissions_est_prop_gdp_(2016-2019).csv")
smaller_gdp_data_na |> write_csv(file = "na_data/smaller_gdp_data_na.csv")
smaller_lat_long_na |> write_csv(file = "na_data/smaller_lat_long_na")

```
