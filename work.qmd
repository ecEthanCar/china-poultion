---
title: "Analyzing Airbnb Data"
subtitle: "Report"
format: pdf
---

```{r}
#| load-package
#| echo: false

library(tidyverse) 
library(skimr) 
library(jsonlite) 
library(scales) 
library(lubridate) 
library(knitr) 
library(kableExtra) 
library(patchwork) 
library(tidymodels) 
library(gridExtra) 
library(broom)
library(readxl)
library(dplyr)

library(fuzzyjoin)

theme_set(theme_minimal())
```

```{r}
#| import-data-for-reference

indicator_2016 <- read_excel("Shared_Data/Economic Indicators(China)2016.xlsx")
indicator_2017 <- read_excel("Shared_Data/Economic Indicators(China)2017.xlsx")
indicator_2018 <- read_excel("Shared_Data/Economic Indicators(China)2018.xlsx")
indicator_2019 <- read_excel("Shared_Data/Economic Indicators(China)2019.xlsx")
indicator_2020 <- read_excel("Shared_Data/Economic Indicators(China)2020.xlsx")
indicator_2021 <- read_excel("Shared_Data/Economic Indicators(China)2021.xlsx")
indicator_2022 <- read_excel("Shared_Data/Economic Indicators(China)2022.xlsx")

```

```{r}
#| 2016-2022-providence-import-data

# Set the directory path where the files are located
folder_path <- "Shared_Data"

# List all the files in the folder
file_list <- list.files(folder_path)

# Create an empty list to store the data from each file
data_list <- list()

# Iterate over the file list using a for loop
for (file_name in file_list) {
  # Check if the file name meets criteria
  if (grepl("^Economic Indicators\\(China\\)\\d{4}\\.xlsx$", file_name) | grepl("^Economic Indicators\\(China\\)\\.xlsx$", file_name)) {
    file_path <- file.path(folder_path, file_name)
    file_data <- read_xlsx(file_path, na = "--")
    # New column indicating year
    file_data$year <- str_extract(file_name, "\\d{4}") |> as.numeric()
    # Converts all but Region to doubles
    data_list[[file_name]] <- file_data |>
      #mutate_if(is.character, list(~na_if(., "--"))) |>
      mutate(across(-Region, as.numeric))
  }
}

# Merge files
providence_only <- bind_rows(data_list) |> 
  filter(Region != c("China", "Source: Wind")) |>
  group_by(year)

providence_only |> write_csv(file = "data/E_I(2016-2022).csv")
providence_only |> write_excel_csv(file = "data/E_I(2016-2022).xlsx")

# Ask about Economic Indicators(Xiangxi).xlsx

```

```{r}
#| 2022-providence-region-import-data

folder_path_2 <- "Shared_Data/provincial_lgfv"
file_list_2 <- list.files(folder_path_2)
data_list_2 <- list()

for (file_name in file_list_2) {
  if (grepl("^Economic Indicators", file_name)) {
    file_path_2 <- file.path(folder_path_2, file_name)
    file_data_2 <- read_xlsx(file_path_2, na = "--")
    file_data_2$Province <- str_match(file_name, "\\((.*?)\\)")[, 2]
    data_list_2[[file_name]] <- file_data_2 |>
      #mutate_if(is.character, list(~na_if(., "--"))) |>
      mutate(across(-c(Province, Region), as.numeric))
  }
}

cleaned <- bind_rows(data_list_2) |>
  filter(Region != "Source: Wind") |>
  group_by(Province)

cleaned$Region <- gsub("Dist", "", cleaned$Region)
cleaned$Region <- gsub("\\(Inner Mongolia", "", cleaned$Region)
cleaned$Region <- gsub("WULONG", "Wulong", cleaned$Region)
cleaned$Region <- gsub("Neimenggu\\)", "Neimenggu", cleaned$Region)
cleaned$Province <- gsub("\\(Inner Mongolia", "", cleaned$Province)
cleaned$Province <- gsub("Neimenggu", "Inner Mongolia", cleaned$Province)
cleaned$Region <- gsub("\\bBaisha\\b", "Baisha Li", cleaned$Region)
cleaned$Region <- gsub("tongling", "Tongling", cleaned$Region)
cleaned$Region <- gsub("Bose", "Baise", cleaned$Region)
cleaned$Region <- gsub("Changdu", "Chengdu", cleaned$Region)
cleaned$Region <- gsub("Changjiang", "Changjiang Li", cleaned$Region)
cleaned$Region <- gsub("Hulun Buir", "Hulun Beir", cleaned$Region)
cleaned$Region <- gsub("Ili Kazak", "Ili Kazakh", cleaned$Region)
cleaned$Region <- gsub("Kaixian", "Kaizhou", cleaned$Region)
cleaned$Region <- gsub("Zhongxian", "Zhong", cleaned$Region)
cleaned$Region <- gsub("Zhanjiang", "Zhangjiang", cleaned$Region)
cleaned$Region <- gsub("Xigaze", "Shigatse", cleaned$Region)
cleaned$Region <- gsub("ürümqi", "Urumqi", cleaned$Region)
cleaned$Region <- gsub("Lvliang", "Lüliang", cleaned$Region)
cleaned$Region <- ifelse(
  cleaned$Region == "Chengdu" & cleaned$Province == "Tibet", 
  "Chamdo", 
  cleaned$Region
)

cleaned$Region[cleaned$Region == cleaned$Province] <- NA

cleaned$Region <- trimws(cleaned$Region)

# cleaned$Region <- tolower(cleaned$Region)
# cleaned$Province <- tolower(cleaned$Province)

# distinct(cleaned, Province)

cleaned |> write_csv(file = "data/E_I(all provinces).csv")

# DONE TODO
# figure out why Aral, Xinjiang has not city code 
# (it's located/surrounded within Asku, Xinjiang)
# Ask what to do if there are two of the same row in the city-code data (Banan, Chongqing)

# Cities with no code:
# - Aral, Xinjiang
# - Baodi, Tianjin
# - Bayannur, Inner Mongolia

# Cities with two instances:
# - Baoshan, Shanghai and Baoshan, Yunnan

# Name of places in inner mongolia are weird
# I'm still in the process of fixing translation errors, since doing it in mass lead to some.

```

```{r}
#| merge-economy-and-finaical-2022

economy_2022 <- read_excel("Shared_Data/Economic Indicators(China)2022.xlsx", sheet = 2)
finaical_2022 <- read_excel("Shared_Data/Economic Indicators(China)2022.xlsx", sheet = 3)

efs_2022 <- full_join(economy_2022, finaical_2022, by = join_by(Region)) |>
  mutate_if(is.character, list(~na_if(., "--"))) |>
  mutate(across(-c(Region), as.numeric))

efs_2022 |> write_csv(file = "data/efs_2022.csv")
efs_2022 |> write_excel_csv(file = "data/efs_2022.xlsx")
  
```

```{r}
#| new-city-codes

# prc_place_names <- read_excel("Shared_Data/Copy China City Codes (2022).xlsx", 
#                               na = c("Na", "City area", "")) 

prc_place_names <- read.csv("Shared_Data/V3 China City Codes (2022) - Sheet1.csv", na.strings = c("Na", "City area", ""))

#Assumes 'City area' mean code for entire city

prc_place_names$Statistical_Division_Code <- format(
  prc_place_names$Statistical_Division_Code, 
  scientific = FALSE)
prc_place_names$Statistical_Division_Code <- gsub("000000", "", 
  prc_place_names$Statistical_Division_Code) #Removes extra zeros

#Removing superfluous word from Province
for_cleaned <- prc_place_names |> 
  mutate(Province = str_remove_all(Province,
  paste(c(" (?i)province",
          " (?i)autonomous region",
          " (?i)autonomous prefecture",
          " (?i)uygur",
          " (?i)hui",
          " (?i)zhuang"),
        collapse = "|"))) |>
  select(Province, Region, Statistical_Division_Code, Province.Code)

test <- for_cleaned |> filter(is.na(Region))

#Removing superfluous word from Region
for_cleaned$Region <- str_remove_all(for_cleaned$Region,
  paste(c(" (?i)area",
          " (?i)league",
          " (?i)district",
          " (?i)new district",
          " (?i)county", 
          " (?i)city", 
          " (?i)administration",
          " (?i)region",
          " (?i)autonomous county",
          " (?i)autonomous region",
          " (?i)new area",
          " (?i)administrative region",
          " (?i)administrative prefecture",
          " (?i)autonomous prefecture",
          " Tibetan Qiang",
          " Li Miao",
          " Tibetan and Qiang Autonomous Prefecture",
          " Li and Miao",
          " Mongolian",
          " (?i)hui",
          " Bai",
          " Dai and Jingpo",
          " Tujia and Miao",
          " Tibetan",
          " Hani| Yi",
          "City of ",
          " Korean",
          " Dai",
          " Zhuang Miao",
          " Tujia",
          " Buyi Miao",
          " Miao and Dong",
          " Zhuang and Miao Autonomous Prefecture",
          " and"),
        collapse = "|"))

#Word fixing
for_cleaned$Region <- gsub("Huaian", "Huai'an", for_cleaned$Region)
for_cleaned$Region <- gsub("Hulunbeir", "Hulun Beir", for_cleaned$Region)
for_cleaned$Region <- gsub("Jinan", "Ji'nan", for_cleaned$Region)
for_cleaned$Region <- gsub("NanNing", "Nanning", for_cleaned$Region)

merged_cleaned <- merge(cleaned, for_cleaned, by = c("Region", "Province"), all.x = TRUE) 
# |> 
#   filter(Province.y == Province.x)
na_merged_cleaned <- merged_cleaned |> filter(is.na(Statistical_Division_Code)) |>
  filter(Region != Province)

# merged_cleaned |> write_csv(file = "data/known_city_codes.csv")
# na_merged_cleaned |> write_csv(file = "data/unknown_city_codes.csv")

merged_cleaned |> write_csv(file = "data/[WITHCODES]E_I(all provinces).csv")

# # fuzzy_df <- stringdist_left_join(prc_place_names, cleaned, by = c("Region", "Province"), method = "jw", max_dist = 0.3)
# 
# fuzzy_df
# find the province codes too

for_cleaned |> write_csv("data/cleaned_codes.csv")

```

```{r}
#| carbon-triangle-estate-property-separeation

Carbon_Triangle <- read_csv("Shared_Data/Carbon Triangle Copy - My Series.csv") |>
  rename(Province = Data_type)

Carbon_Triangle_2 <- Carbon_Triangle |> distinct(Unit)

names(Carbon_Triangle) <- gsub(" ", "_", names(Carbon_Triangle))

#Filtering if real estate, then removing superfluous word from Province
real_estate <- Carbon_Triangle |> 
  filter(grepl("CN: Real Estate Investment:", Province))
real_estate$Province <- gsub(".*?:.*?:(.*?):.*", "\\1", real_estate$Province)
real_estate$Province <- gsub("CN: Real Estate Investment:", "", real_estate$Province)
real_estate$Province <- trimws(real_estate$Province)

#Filtering if property, then removing superfluous word from Province
property <- Carbon_Triangle |> 
  filter(grepl("CN: Property Price: Residential:", Province))
property$Province <- gsub("CN: Property Price: Residential:", "", property$Province)
property$Province <- sub(":.*", "", property$Province)
property$Province <- trimws(property$Province)

# New goal: merge this dataset with the one I just finished (confirm with professor that this is the one he want me to use to merge of if there is a newer version, same goes for the data I just merged)

```

```{r}

#Renaming Subnational to Region
merge_property <- property |> select(!Region) |>
  rename(Region = Subnational)

merge_estate <- select(real_estate, !Region) |>
    rename(Region = Subnational)

property_for_cleaned <- merge(for_cleaned, merge_property, by = c("Region"), all.x = TRUE)
all_good_property_for_cleaned <- property_for_cleaned |> 
  filter(Province.x == Province.y & Statistical_Division_Code != "NA")
wierd_property_for_cleaned <- property_for_cleaned |> 
  filter(Province.x != Province.y | Statistical_Division_Code == "NA") # Just fix manually later

estate_for_cleaned <- merge(for_cleaned, merge_estate, by = c("Region"), all.x = TRUE)
all_good_estate_for_cleaned <- estate_for_cleaned |> 
  filter(Province.x == Province.y & Statistical_Division_Code != "NA")
wierd_estate_for_cleaned <- estate_for_cleaned |>
  filter(Province.x != Province.y | Statistical_Division_Code == "NA") # Just fix manually later

```

```{r}

merged_cleaned_v2 <- merge(merged_cleaned, all_good_property_for_cleaned, by = c("Statistical_Division_Code"), all.x = TRUE)
merged_cleaned_v2

```

```{r}
#| pivot-year-data

pivot_property <- merge_property |>
  pivot_longer(
    cols = c(`1999`:`2021`),
    names_to = "year",
    values_to = "Annual_Real_Estate_Investment"
  ) |>
  select(Province, Region, year, Annual_Real_Estate_Investment) |>
  mutate(year = as.numeric(year),
         pct = as.numeric(Annual_Real_Estate_Investment))

pivot_estate <- merge_estate |>
  pivot_longer(
    cols = c(`1999`:`2021`),
    names_to = "year",
    values_to = "Annual_Avg_Property_Price"
  ) |>
  select(Province, Region, year, Annual_Avg_Property_Price) |>
  mutate(year = as.numeric(year),
         pct = as.numeric(Annual_Avg_Property_Price))

pivot_estate_property <- merge(pivot_property, pivot_estate, by = c("Region", "Province", "year"), all.x = TRUE) |>
  select(!c(`pct.x`, `pct.y`)) |>
  mutate(Province = gsub("\\(DC\\) ", "", Province), 
         Region = gsub("\\(DC\\) ", "", Region))

```

```{r}
#| test graphs

#Test graph with usable data
province_only_property <- pivot_property 
##|> filter(Province == Subnational)

ggplot(province_only_property, aes(year, pct)) +
  geom_line() +
  facet_wrap(facets = vars(Province))

estate_only_property <- pivot_estate 
##|> filter(Province == Subnational)

ggplot(estate_only_property, aes(year, pct)) +
  geom_line() +
  facet_wrap(facets = vars(Province))

#Test boxplot with usable data
ggplot(all_good_property_for_cleaned, aes(Median)) +
  geom_boxplot() +
  facet_wrap(facets = vars(Province.x))

```

```{r}

```

```{r}

```



